import com.android.build.OutputFile

// Top-level build file where you can add configuration options common to all
// sub-projects/modules.
buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.0'
    }
}

apply plugin: 'com.android.application'

repositories {
    google()
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

configurations {
    playstoreImplementation
    compatImplementation
    bitgamFreeCompatImplementation
    bitgamPlaystoreCompatImplementation
    bitgamPlaystoreSystemImplementation
    quicksyFreeCompatImplementation
    quicksyImplementation
    cleanedAnnotations
    compile.exclude group: 'org.jetbrains' , module:'annotations'
}

ext {

    releaseMinifyEnabled = true
    supportLibVersion = '28.0.0'
}

dependencies {
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.navigation:navigation-fragment:2.1.0'
    implementation 'androidx.navigation:navigation-ui:2.1.0'

    //should remain that low because later versions introduce dependency to androidx (not sure exactly from what version)
    playstoreImplementation('com.google.firebase:firebase-messaging:17.3.4') {
        exclude group: 'com.google.firebase', module: 'firebase-core'
        exclude group: 'com.google.firebase', module: 'firebase-analytics'
        exclude group: 'com.google.firebase', module: 'firebase-measurement-connector'
    }
    bitgamPlaystoreCompatImplementation("com.android.installreferrer:installreferrer:1.1.2")
    bitgamPlaystoreSystemImplementation("com.android.installreferrer:installreferrer:1.1.2")
    implementation 'org.sufficientlysecure:openpgp-api:10.0'
    implementation('com.theartofdev.edmodo:android-image-cropper:2.7.+') {
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'exifinterface'
    }
    implementation 'androidx.legacy:legacy-support-v13:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.exifinterface:exifinterface:1.3.1'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.emoji:emoji:1.1.0'
    implementation 'com.google.android.material:material:1.2.1'
    compatImplementation 'androidx.emoji:emoji-appcompat:1.1.0'
    bitgamFreeCompatImplementation 'androidx.emoji:emoji-bundled:1.1.0'
    quicksyFreeCompatImplementation 'androidx.emoji:emoji-bundled:1.1.0'
    implementation 'org.bouncycastle:bcmail-jdk15on:1.64'
    //zxing stopped supporting Java 7 so we have to stick with 3.3.3
    //https://github.com/zxing/zxing/issues/1170
    implementation 'com.google.zxing:core:3.3.3'
    implementation 'de.measite.minidns:minidns-hla:0.2.4'
    implementation 'me.leolin:ShortcutBadger:1.1.22@aar'
    implementation 'org.whispersystems:signal-protocol-java:2.6.2'
    implementation 'com.makeramen:roundedimageview:2.3.0'
    implementation "com.wefika:flowlayout:0.4.1"
    implementation 'net.ypresto.androidtranscoder:android-transcoder:0.3.0'
    implementation 'org.jxmpp:jxmpp-jid:0.6.4'
    implementation 'org.osmdroid:osmdroid-android:6.1.5'
    implementation 'org.hsluv:hsluv:0.2'
    implementation 'org.conscrypt:conscrypt-android:2.2.1'
    implementation 'me.drakeet.support:toastcompat:1.1.0'
    implementation "com.leinardi.android:speed-dial:2.0.1"
    //retrofit needs to stick with 2.6.x (https://github.com/square/retrofit/blob/master/CHANGELOG.md)
    implementation "com.squareup.retrofit2:retrofit:2.6.4"
    implementation "com.squareup.retrofit2:converter-gson:2.6.4"
    //okhttp needs to stick with 3.12.x
    implementation 'com.squareup.okhttp3:okhttp:3.12.12'
    implementation 'com.google.guava:guava:27.1-android'
    quicksyImplementation 'io.michaelrocks:libphonenumber-android:8.11.1'
    //implementation fileTree(include: ['libwebrtc-m83.aar'], dir: 'libs')
    implementation 'org.webrtc:google-webrtc:1.0.30039'
    //implementation 'com.github.hani-momanii:SuperNova-Emoji:1.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    //implementation 'com.google.android.material:material:1.0.0'
    /*implementation("com.mikepenz:materialdrawer:6.0.9@aar") {
        transitive = true
    }*/
    implementation "com.android.support:recyclerview-v7"
    implementation "com.android.support:support-annotations"
    implementation "com.android.support:design"
    implementation 'com.github.stfalcon:stfalcon-imageviewer:1.0.1'
    //implementation 'com.google.android.exoplayer:exoplayer:2.11.8'
    implementation 'com.github.MicroRJ:Android-Canvas-Squircle:2.0'
}

ext {
    travisBuild = System.getenv("TRAVIS") == "true"
    preDexEnabled = System.getProperty("pre-dex", "true")
    abiCodes = ['armeabi-v7a': 1, 'x86': 2, 'x86_64': 3, 'arm64-v8a': 4]
}

android {
    signingConfigs {
        signConfig1 {
            storeFile file('/home/u-chan/Desktop/bitgam.jks')
            keyPassword '12354568789'
            keyAlias 'bitgamim'
            storePassword '12354568789'
        }
    }
    compileSdkVersion 29

    dexOptions {
        javaMaxHeapSize "4g"
    }

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "0.0.1"
        archivesBaseName += "-$versionName"
        applicationId 'com.bitgam.app'
        resValue "string", "applicationId", applicationId
        resValue "string", "app_name", "BitGam"
        buildConfigField "String", "LOGTAG", "\"conversations\""
        signingConfig signingConfigs.signConfig1
    }

    splits {
        abi {
            universalApk true
            enable true
        }
    }

    dataBinding {
        enabled true
    }

    /*buildFeatures {
        dataBinding true
    }*/

    dexOptions {
        // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
        preDexLibraries = preDexEnabled && !travisBuild
        jumboMode true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions("mode", "distribution", "emoji")

    productFlavors {

        quicksy {
            dimension "mode"
            applicationId = "im.quicksy.client"
            resValue "string", "app_name", "Quicksy"
            resValue "string", "applicationId", applicationId
            buildConfigField "String", "LOGTAG", "\"quicksy\""
        }

        bitgam {
            dimension "mode"
        }

        playstore {
            dimension "distribution"
            versionNameSuffix "+p"
        }
        free {
            dimension "distribution"
            versionNameSuffix "+f"
        }
        system {
            dimension "emoji"
            versionNameSuffix "s"
        }
        compat {
            dimension "emoji"
            versionNameSuffix "c"
        }
    }

    sourceSets {
        quicksyFreeCompat {
            java {
                srcDir 'src/freeCompat/java'
            }
        }
        quicksyPlaystoreCompat {
            java {
                srcDir 'src/playstoreCompat/java'
            }
            res {
                srcDir 'src/playstoreCompat/res'
                srcDir 'src/quicksyPlaystore/res'
            }
        }
        quicksyPlaystoreSystem {
            res {
                srcDir 'src/quicksyPlaystore/res'
            }
        }
        bitgamFreeCompat {
            java {
                srcDir 'src/freeCompat/java'
                srcDir 'src/bitgamFree/java'
            }
        }
        bitgamFreeSystem {
            java {
                srcDir 'src/bitgamFree/java'
            }
        }
        bitgamPlaystoreCompat {
            java {
                srcDir 'src/playstoreCompat/java'
                srcDir 'src/bitgamPlaystore/java'
            }
            res {
                srcDir 'src/playstoreCompat/res'
                srcDir 'src/bitgamPlaystore/res'
            }
        }
        bitgamPlaystoreSystem {
            java {
                srcDir 'src/bitgamPlaystore/java'
            }
            res {
                srcDir 'src/bitgamPlaystore/res'
            }
        }
    }

    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            versionNameSuffix "r"
            signingConfig signingConfigs.signConfig1
        }
        debug {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            versionNameSuffix "d"
        }
    }


    if (new File("signing.properties").exists()) {
        Properties props = new Properties()
        props.load(new FileInputStream(file("signing.properties")))

        signingConfigs {
            release {
                storeFile file(props['keystore'])
                storePassword props['keystore.password']
                keyAlias props['keystore.alias']
                keyPassword props['keystore.password']
            }
        }
        buildTypes.release.signingConfig = signingConfigs.release
    }

    lintOptions {
        disable 'ExtraTranslation', 'MissingTranslation', 'InvalidPackage', 'MissingQuantity', 'AppCompatResource'
    }

    subprojects {

        afterEvaluate {
            if (getPlugins().hasPlugin('android') ||
                    getPlugins().hasPlugin('android-library')) {

                configure(android.lintOptions) {
                    disable 'AndroidGradlePluginVersion', 'MissingTranslation'
                }
            }

        }
    }

    packagingOptions {
        exclude 'META-INF/BCKEY.DSA'
        exclude 'META-INF/BCKEY.SF'
    }

    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def baseAbiVersionCode = project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))
            if (baseAbiVersionCode != null) {
                output.versionCodeOverride = (100 * variant.versionCode) + baseAbiVersionCode
            } else {
                output.versionCodeOverride = (100 * variant.versionCode)
            }
        }

    }
}
